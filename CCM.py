# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Inicialização das bibliotecas necessárias

from PyQt5 import QtCore, QtGui, QtWidgets
from serial.tools import list_ports
import serial

# Identificação das portas COM do Computador

serial_ports = list_ports.comports()

for port, desc, _ in sorted(serial_ports):

    print("{}: {}\n".format(port, desc))

# Porta COM correspondente ao motor de passo

Porta_P = "COM3" 

Porta_C = "COM7"

Porta = serial.Serial(Porta_P, 115200)

Porta_2 = serial.Serial(Porta_C, 115200)

# Variáveis de controle do sistema 

manual = 0 # Controle Manual do Motor de Passo 

automatico = 0 # Controle Automático do Motor de Passo 

manual_2 = 0 # Controle Manual do Motor CC

automatico_2 = 0 # Controle Automático do Motor CC

qtdpassos = 0 # Quantidade de passos a serem dados no automático

qtempo = 0 # Quantidade de tempo para o motor CC ser executado

class Ui_Widget(object):

    # Setup das Widgets a serem Utilizadas

    def setupUi(self, Widget):

        # Estabelecimento da Janela Principal

        Widget.setObjectName("Widget")
        Widget.resize(860, 599)

        # Criação do Texto do título da estação do motor de passo

        self.label = QtWidgets.QLabel(Widget)
        self.label.setObjectName("label")

        # Posicionamento e Tamanho da caixa de texto

        self.label.setGeometry(QtCore.QRect(55, 20, 371, 41))

        # Setagem da fonte de escrita a ser utilizada no título da estação do motor de passo

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(18)
        font.setBold(True)
        self.label.setFont(font)

        # Configurações adicionais 

        self.label.setScaledContents(False)
        self.label.setWordWrap(False)
        self.label.setIndent(0)

        # Criação do Texto do título da estação do motor CC

        self.label_2 = QtWidgets.QLabel(Widget)
        self.label_2.setObjectName("label_2")

        # Posicionamento e Tamanho da caixa de texto

        self.label_2.setGeometry(QtCore.QRect(500, 20, 371, 41))

        # Setagem da fonte de escrita a ser utilizada no título da estação do motor CC

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(18)
        font.setBold(True)
        self.label_2.setFont(font)

        # Configurações adicionais 
        
        self.label_2.setScaledContents(False)
        self.label_2.setWordWrap(False)
        self.label_2.setIndent(0)

        # Criação de Linha de Separação entre estações

        self.line = QtWidgets.QFrame(Widget)
        self.line.setObjectName("line")

        # Posicionamento e Tamanho da linha

        self.line.setGeometry(QtCore.QRect(400, 0, 31, 601))

        # Configurações adicionais

        self.line.setLineWidth(3)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)

        # Criação do Push Button referente ao acionamento manual do Motor de Passo

        self.pushButton = QtWidgets.QPushButton(Widget)

        self.pushButton.setObjectName("pushButton")

        # Posicionamento e tamanho do botão

        self.pushButton.setGeometry(QtCore.QRect(30, 90, 361, 29))

        # Conexão com função quando o botão é clicado

        self.pushButton.clicked.connect(self.BotaoManual)

        # Criação do Push Button referente ao acionamento automatico do Motor de Passo

        self.pushButton_3 = QtWidgets.QPushButton(Widget)

        self.pushButton_3.setObjectName("pushButton3")

        # Posicionamento e tamanho do botão

        self.pushButton_3.setGeometry(QtCore.QRect(30, 370, 361, 29))

        # Conexão com função quando o botão é clicado

        self.pushButton_3.clicked.connect(self.BotaoAutomatico)

        # Criação do Push Button referente ao acionamento do Motor CC

        self.pushButton_2 = QtWidgets.QPushButton(Widget)
        self.pushButton_2.setObjectName("pushButton_2")

        # Posicionamento e tamanho do botão

        self.pushButton_2.setGeometry(QtCore.QRect(450, 90, 361, 29))

        # Conexão com função caso o botão seja clicado

        self.pushButton_2.clicked.connect(self.ManualCC)

        # Criação do Display Numérico para amostragem da velocidade do motor de passo

        self.lcdNumber = QtWidgets.QLCDNumber(Widget)
        self.lcdNumber.setObjectName("lcdNumber")

        # Posicionamento e tamanho do display

        self.lcdNumber.setGeometry(QtCore.QRect(250, 190, 121, 71))

        # Criação da legenda "Velocidade" do display numérico

        self.label_4 = QtWidgets.QLabel(Widget)
        self.label_4.setObjectName("label_4")

        # Posicionamento e tamanho da caixa de texto

        self.label_4.setGeometry(QtCore.QRect(270, 260, 91, 41))

        # Setagem da fonte de escrita a ser utilizada no texto "Velocidade"

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(10)
        font.setBold(True)
        self.label_4.setFont(font)

        # Configurações Adicionais

        self.label_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_4.setTextFormat(QtCore.Qt.AutoText)
        self.label_4.setScaledContents(False)
        self.label_4.setWordWrap(False)
        self.label_4.setIndent(0)
        self.label_4.setOpenExternalLinks(False)

        # Criação do Slider para alteração da velocidade

        self.horizontalSlider = QtWidgets.QSlider(Widget)
        self.horizontalSlider.setObjectName("horizontalSlider")

        # Posicionamento e tamanho do slider

        self.horizontalSlider.setGeometry(QtCore.QRect(49, 210, 171, 20))

        # Configurações adicionais

        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)

        # Conexão com função quando o valor interno do slider for mudado

        self.horizontalSlider.valueChanged.connect(self.velocidade)
        
        # Criação de Push Button referente ao sentido horário de rotação do motor de passo

        self.pushButton_4 = QtWidgets.QPushButton(Widget)
        self.pushButton_4.setObjectName("pushButton_4")

        # Posicionamento e tamanho do botão

        self.pushButton_4.setGeometry(QtCore.QRect(40, 140, 161, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_4.clicked.connect(self.Horario)

        # Criação de Push Button referente ao sentido anti horário de rotação do motor de passo

        self.pushButton_5 = QtWidgets.QPushButton(Widget)
        self.pushButton_5.setObjectName("pushButton_5")

        # Posicionamento e tamanho do botão

        self.pushButton_5.setGeometry(QtCore.QRect(220, 140, 161, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_5.clicked.connect(self.AntiHorario)
        
        # Criação da linha de separação entre parte manual e automática do motor de passo

        self.line_3 = QtWidgets.QFrame(Widget)
        self.line_3.setObjectName("line_3")

        # Posicionamento e tamanho da linha

        self.line_3.setGeometry(QtCore.QRect(0, 320, 411, 20))

        # Configurações adicionais 

        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)

        # Criação de Label de sinalização de escolha de quantidade de passos do motor de passo

        self.label_7 = QtWidgets.QLabel(Widget)
        self.label_7.setObjectName("label_7")

        # Posicionamento e tamanho da caixa de texto

        self.label_7.setGeometry(QtCore.QRect(50, 425, 181, 51))

        # Setagem da fonte de escrita a ser utilizada no texto "Quantidade de Passos"

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(10)
        font.setBold(True)
        self.label_7.setFont(font)

        # Configurações adicionais

        self.label_7.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_7.setTextFormat(QtCore.Qt.AutoText)
        self.label_7.setScaledContents(False)
        self.label_7.setWordWrap(False)
        self.label_7.setIndent(0)
        self.label_7.setOpenExternalLinks(False)

        # Criação de Caixa de Texto para Input do usuário da quantidade de passos

        self.spinBox2 = QtWidgets.QSpinBox(Widget)
        self.spinBox2.setObjectName("spinBox2")

        # Posicioaamento e tamanho da caixa de texto

        self.spinBox2.setGeometry(QtCore.QRect(250, 435, 113, 31))

        # Configuração do range de valores do spin box

        self.spinBox2.setRange(-1000, 1000)

        # Conexão com função quando o valor da caixa é alterado

        self.spinBox2.valueChanged.connect(self.Passos)
        
        # Criação do Push Button referente a execução do comando automático do motor de passo

        self.pushButton_8 = QtWidgets.QPushButton(Widget)
        self.pushButton_8.setObjectName("pushButton_8")

        # Posicionamento e tamanho do botão

        self.pushButton_8.setGeometry(QtCore.QRect(50, 505, 311, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_8.clicked.connect(self.executar)

        # Criação do Push Button referente a ativação do controle manual do motor CC

        self.pushButton_10 = QtWidgets.QPushButton(Widget)
        self.pushButton_10.setObjectName("pushButton_10")

        # Posicionamento e tamanho do botão

        self.pushButton_10.setGeometry(QtCore.QRect(450, 370, 361, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_10.clicked.connect(self.AutomaticoCC)

        # Criação do Push Button referente ao sentido de rotação horário do motor CC

        self.pushButton_11 = QtWidgets.QPushButton(Widget)
        self.pushButton_11.setObjectName("pushButton_11")

        # Posicionamento e tamanho do botão

        self.pushButton_11.setGeometry(QtCore.QRect(460, 140, 161, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_11.clicked.connect(self.HorarioCC)

        # Criação do Push Button referente ao sentido de rotação antihorário do motor CC

        self.pushButton_12 = QtWidgets.QPushButton(Widget)
        self.pushButton_12.setObjectName("pushButton_11")

        # Posicionamento e tamanho do botão

        self.pushButton_12.setGeometry(QtCore.QRect(645, 140, 161, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_12.clicked.connect(self.AntiHorarioCC)

        # Criação de Slider para alteração da velocidade de rotação do motor CC

        self.horizontalSlider_2 = QtWidgets.QSlider(Widget)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")

        # Posicionamento e tamanho do slider

        self.horizontalSlider_2.setGeometry(QtCore.QRect(470, 210, 171, 20))

        # Configurações adicionais

        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)

        # Conexão com função quando o valor interno do slider for mudado

        self.horizontalSlider_2.valueChanged.connect(self.velocidadeCC)

        # Criação do Display Numérico para amostragem da velocidade do motor CC

        self.lcdNumber_2 = QtWidgets.QLCDNumber(Widget)
        self.lcdNumber_2.setObjectName("lcdNumber_2")

        # Posicionamento e tamanho do display

        self.lcdNumber_2.setGeometry(QtCore.QRect(675, 190, 121, 71))

        # Criação da legenda "Velocidade" do display numérico referente ao motor CC

        self.label_10 = QtWidgets.QLabel(Widget)
        self.label_10.setObjectName("label_4")

        # Posicionamento e tamanho da caixa de texto

        self.label_10.setGeometry(QtCore.QRect(695, 260, 91, 41))

        # Setagem da fonte de escrita a ser utilizada no texto "Velocidade"

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(10)
        font.setBold(True)
        self.label_10.setFont(font)

        # Configurações Adicionais

        self.label_10.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_10.setTextFormat(QtCore.Qt.AutoText)
        self.label_10.setScaledContents(False)
        self.label_10.setWordWrap(False)
        self.label_10.setIndent(0)
        self.label_10.setOpenExternalLinks(False)

        # Criação da linha de separação entre os controles dos modos automatico a manual do motor CC

        self.line_5 = QtWidgets.QFrame(Widget)
        self.line_5.setObjectName("line_5")

        # Posicionamento e tamanho da linha

        self.line_5.setGeometry(QtCore.QRect(400, 320, 500, 20))

        # Configurações adicionais 

        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)

        # Criação de Caixa de Texto para Input do usuário da quantidade de tempo de acionamento do motor CC

        self.spinBox4 = QtWidgets.QSpinBox(Widget)
        self.spinBox4.setObjectName("spinBox4")

        # Posicioaamento e tamanho da caixa de texto

        self.spinBox4.setGeometry(QtCore.QRect(670, 435, 113, 31))

        # Configuração do range de valores do spin box

        self.spinBox4.setRange(-10, 10)

        # Conexão com função quando o valor da caixa é alterado

        self.spinBox4.valueChanged.connect(self.Tempo)

        # Criação de Label de sinalização de escolha de tempo de acionamento do motor CC

        self.label_12 = QtWidgets.QLabel(Widget)
        self.label_12.setObjectName("label_7")

        # Posicionamento e tamanho da caixa de texto

        self.label_12.setGeometry(QtCore.QRect(500, 425, 181, 51))

        # Setagem da fonte de escrita a ser utilizada no texto "Tempo Acionado"

        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Small Semibol")
        font.setPointSize(10)
        font.setBold(True)
        self.label_12.setFont(font)

        # Configurações adicionais

        self.label_12.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_12.setTextFormat(QtCore.Qt.AutoText)
        self.label_12.setScaledContents(False)
        self.label_12.setWordWrap(False)
        self.label_12.setIndent(0)
        self.label_12.setOpenExternalLinks(False)

        # Criação do Push Button referente a execução do comando automático do motor CC

        self.pushButton_16 = QtWidgets.QPushButton(Widget)
        self.pushButton_16.setObjectName("pushButton_16")

        # Posicionamento e tamanho do botão

        self.pushButton_16.setGeometry(QtCore.QRect(475, 505, 311, 29))

        # Conexão com função quando o botão é pressionado

        self.pushButton_16.clicked.connect(self.executarCC)

        # Realização da tradução dos textos exibidos na tela

        self.retranslateUi(Widget)

        QtCore.QMetaObject.connectSlotsByName(Widget)

    def retranslateUi(self, Widget):

        # Renomeação dos botões, textos e titulos de janela

        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "CCM - Máquinas Elétricas 2024.1"))
        self.label.setText(_translate("Widget", "Estação - Motor Passo"))
        self.label_2.setText(_translate("Widget", "Estação - Motor CC"))
        self.pushButton.setText(_translate("Widget", "Habilitar/Desabilitar Manual"))
        self.pushButton_2.setText(_translate("Widget", "Habilitar/Desabilitar Manual"))
        self.label_4.setText(_translate("Widget", "Velocidade"))
        self.pushButton_4.setText(_translate("Widget", "Sentido Horário"))
        self.pushButton_5.setText(_translate("Widget", "Sentido Anti Horário"))
        self.label_7.setText(_translate("Widget", "Quantidade de Passos"))
        self.pushButton_8.setText(_translate("Widget", "Executar"))
        self.pushButton_3.setText(_translate("Widget", "Habilitar/Desabilitar Automático"))
        self.pushButton_10.setText(_translate("Widget", "Habilitar/Desabilitar Automático"))
        self.pushButton_11.setText(_translate("Widget", "Sentido Horário"))
        self.pushButton_12.setText(_translate("Widget", "Sentido AntiHorário"))
        self.label_10.setText(_translate("Widget", "Velocidade"))
        self.label_12.setText(_translate("Widget", "Tempo Acionado"))
        self.pushButton_16.setText(_translate("Widget", "Executar"))

    def BotaoManual(self):

        # Quando o botão de controle manual é pressionado, o modo manual é habilitado, sendo sinalizado em Python e par ao mbed via Serial

        Porta.write(bytes("Manual\n", "utf-8"))

        global manual
        global automatico

        manual = 1
        automatico = 0

    def Horario(self):

        # Com o controle manual habilitado, quando o botão é pressionado, o sentido de rotação do motor é colocado em horário, sendo enviado via Serial

        if(manual == 1):

            Porta.write(bytes("Horario\n", "utf-8"))

    def AntiHorario(self):

        # Com o controle manual habilitado, quando o botão é pressionado, o sentido de rotação do motor é colocado em antihorário, sendo enviado via Serial

        if(manual == 1):

            Porta.write(bytes("AntiHorario\n", "utf-8"))

    def velocidade(self, value):

        # Com o controle manual habilitado, quando o valor do slider é alterado, o novo valor é colocado na serial para leitura do motor, e exibidido no LCD Display

        if(manual == 1):

            Porta.write(bytes(str(value) + "\n", "utf-8"))

            self.lcdNumber.display(value)

    def BotaoAutomatico(self):

        # Quando o botão de modo automático é pressionado, o modo automático é habilitado e sinalizado em Python e via Serial para o mbed

        Porta.write(bytes("Automatico\n", "utf-8"))

        global manual
        global automatico

        manual = 0
        automatico = 1

    def Passos(self):

        # Alterado o valor interno da caixa, o mesmo é transcrito para o mbed via Serial, mas somente se o modo automático for habilitado

        global qtdpassos

        qtdpassos = self.spinBox2.value()

        if (automatico == 1):

            Porta.write(bytes(str(qtdpassos) + "\n", "utf-8"))

            print(str(qtdpassos) + "\n")

    def executar(self):

        # Com o modo automático habilitado, caso o botão seja pressionado, o sistema sinaliza o início do ciclo automático

        if (automatico == 1):

            Porta.write(bytes("Executar\n", "utf-8"))

    def ManualCC(self):

        global manual_2

        global automatico_2

        manual_2 = 1

        automatico_2 = 0

        Porta_2.write(bytes("Manual\n", "utf-8"))
        
    def AutomaticoCC(self):

        global manual_2

        global automatico_2

        manual_2 = 0

        automatico_2 = 1

        Porta_2.write(bytes("Automatico\n", "utf-8"))

    def HorarioCC(self):

        if (manual_2 == 1):

            Porta_2.write(bytes("Horario\n", "utf-8"))

    def AntiHorarioCC(self):

        if (manual_2 == 1):

            Porta_2.write(bytes("AntiHorario\n", "utf-8")) 

    def velocidadeCC(self, value):

        if (manual_2 == 1):

            Porta_2.write(bytes(str(value) + "\n", "utf-8"))

            self.lcdNumber_2.display(value)

    def Tempo(self):

        global qtempo

        qtempo = self.spinBox4.value()

        if (automatico_2 == 1):

            Porta_2.write(bytes(str(qtempo) + "\n", "utf-8"))

    def executarCC(self):

        if (automatico_2 == 1):

            Porta_2.write(bytes("Executar\n", "utf-8"))


# Execução e exibição da janela do programa

if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = Ui_Widget()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec_())
